import { Program, Node, CallExpression, Literal } from '@babel/types';
import { ParserOptions } from '@babel/parser';

declare function getLang(filename: string): string;
declare function isTs(lang?: string): boolean | "" | undefined;
declare function babelParse(code: string, lang?: string, options?: ParserOptions): Program;
declare function isCallOf(node: Node | null | undefined, test: string | ((id: string) => boolean)): node is CallExpression;
declare function checkInvalidScopeReference(node: Node | undefined, method: string, setupBindings: string[]): void;
declare function isStaticExpression(node: Node): boolean;
declare function isLiteralType(node: Node): node is Literal;
declare function getStaticKey(node: Node, computed?: boolean, raw?: boolean): unknown;
declare function walkAST<T = Node>(node: T, options: {
    enter?: (this: {
        skip: () => void;
        remove: () => void;
        replace: (node: T) => void;
    }, node: T, parent: T, key: string, index: number) => void;
    leave?: (this: {
        skip: () => void;
        remove: () => void;
        replace: (node: T) => void;
    }, node: T, parent: T, key: string, index: number) => void;
}): T;

export { babelParse, checkInvalidScopeReference, getLang, getStaticKey, isCallOf, isLiteralType, isStaticExpression, isTs, walkAST };
