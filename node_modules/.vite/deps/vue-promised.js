import {
  isVue3
} from "./chunk-G43SESYJ.js";
import {
  computed2 as computed,
  defineComponent,
  reactive,
  ref,
  toRefs,
  unref,
  warn,
  watch
} from "./chunk-42DZZDNE.js";
import "./chunk-TWLJ45QX.js";

// node_modules/.pnpm/vue-promised@2.2.0_vue@3.2.38/node_modules/vue-promised/dist/vue-promised.esm-bundler.js
function usePromise(promise, pendingDelay = 200) {
  const isRejected = ref(false);
  const isResolved = ref(false);
  const isPending = computed(() => !isRejected.value && !isResolved.value);
  const isDelayElapsed = ref(false);
  const error = ref();
  const data = ref();
  let timerId;
  watch(() => unref(promise), (newPromise) => {
    isRejected.value = false;
    isResolved.value = false;
    error.value = null;
    if (!newPromise) {
      data.value = null;
      if (timerId)
        clearTimeout(timerId);
      timerId = null;
      return;
    }
    if (unref(pendingDelay) > 0) {
      isDelayElapsed.value = false;
      if (timerId)
        clearTimeout(timerId);
      timerId = setTimeout(() => {
        isDelayElapsed.value = true;
      }, Number(unref(pendingDelay)));
    } else {
      isDelayElapsed.value = true;
    }
    newPromise.then((newData) => {
      if (newPromise === unref(promise)) {
        data.value = newData;
        isResolved.value = true;
      }
    }).catch((err) => {
      if (newPromise === unref(promise)) {
        error.value = err;
        isRejected.value = true;
      }
    });
  }, { immediate: true });
  return { isPending, isRejected, isResolved, isDelayElapsed, error, data };
}
var PromisedImpl = defineComponent({
  name: "Promised",
  props: {
    promise: {},
    pendingDelay: {
      type: [Number, String],
      default: 200
    }
  },
  setup(props, { slots }) {
    const propsAsRefs = toRefs(props);
    const promiseState = reactive(usePromise(propsAsRefs.promise, propsAsRefs.pendingDelay));
    return () => {
      if ("combined" in slots) {
        return slots.combined(promiseState);
      }
      const [slotName, slotData] = promiseState.isRejected ? ["rejected", promiseState.error] : !promiseState.isPending ? ["default", promiseState.data] : promiseState.isDelayElapsed ? ["pending", promiseState.data] : [null];
      if (slotName && !slots[slotName]) {
        (isVue3 ? warn : console.warn)(`(vue-promised) Missing slot "${slotName}" in Promised component. Pass an empty "${slotName}" slot or use the "combined" slot to remove this warning. This will fail in production.`);
        return null;
      }
      return slotName && slots[slotName](slotData);
    };
  }
});
var Promised = PromisedImpl;
export {
  Promised,
  usePromise
};
/*!
  * vue-promised v2.1.0
  * (c) 2021 Eduardo San Martin Morote
  * @license MIT
  */
//# sourceMappingURL=vue-promised.js.map
